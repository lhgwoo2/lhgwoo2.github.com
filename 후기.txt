Trouble Shooting

1. AsyncTask 병렬처리
알람이 호출될 때 여러 데이터를 동시에 호출해야하는 작업이 필요하였다. 
그래서 AsyncTask를 활용하면 막연히 병렬적으로 동작하겠지라고 생각하였던 것이
Android 3.0 이상의 버전에서는 직렬화로 동작하며 병렬적으로 스레드를 활용하기 위해서는
executeOnExecutor() 메서드를 활용하여 AsyncTask를 병렬적으로 동작시켜야 한다는 것을 발견하였다.

이것은 여러 스레드를 활용하여 데이터를 처리할 때 순차처리보다 빠른 데이터 처리를 가능케 하였다. 

2. Fragment Manager 내부의 프래그먼트 객체 관리.
Fragment가 생성되고 Manager에서 관리될 때, 이 매니저에서 쌓인 스택번호로 프래그먼트를 가져올 때 
항상 같은 스택순서로 쌓이지 않는 것을 발견하였다.

처음 테스트를 할 때, 잘되다가 한 두번씩 앱이 다운되는 현상이 발생하였다. 그러나 왜 이런 일이 발생하는지 오류를 찾기가 어려웠다.

팀원의 도움으로 디버그 모드를 처음으로 사용해보게 되었고, 
Fragment Manager 객체 내부에 다른 스택 순서로 Fragment가 쌓이는 것을 발견하여 오류를 해결할 수 있었다.

 
3. 이미지 사이즈 관리

알람화면에서 배경화면을 띄워주어야 하기 때문에 큰 사이즈의 이미지가 사용된다.
그렇기 때문에 용량이 상대적으로 클 수 밖에 없는데, 처음에는 이미지를 Glide를 활용하여 캐싱하여서 뷰에 띄워주었지만
몇몇 경우에는 outOfMemory가 발생하여 이미지 로딩을 실패하였다. 

이미지 로딩 라이브러리를 사용해도 캐싱할 수 있는 사이즈 제한이 존재하였고, Heap메모리 사이즈를 변경하거나 또는 캐시메모리를 관리하고
원본품질을 변경하는 등의 관리가 필요하였다. 그래서 이미지 품질을 낮추어 용량을 줄였고 캐시메모리관리와 앱의 Heap 메모리 사이즈를 관리하였다.
그리하여 이미지 로딩 실패를 방지할 수 있었다.


4. 후기

처음으로 안드로이드 개발을 해본 입장으로서 1가지 목표가 있었다.

"앱을 완성해서 Play 스토어에 올려 서비스까지 해보자" 라는 것이었다.
원했던 목표를 거의 달성하여서 뿌듯하고 즐거웠던 시간이었다. 
그리고 더욱 좋았던 것은 다른 프로젝트와 다르게 안드로이드 앱 개발은 개인 개발로도 
상대적으로 쉽게 서비스를 제공할 수 있다는 것이다.

이러한 점이 참으로 매력적이었고 향후 플레이스토어에서 클라이언트들과 소통하며
앱을 더욱 개선해가며 일련의 서비스를 경험해 볼 것이 기대가 된다.


    
  
